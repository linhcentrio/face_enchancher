#!/usr/bin/env python3
"""
RunPod Serverless Handler cho GFPGAN Video Face Enhancement
- T√≠ch h·ª£p MinIO (bi·∫øn m√¥i tr∆∞·ªùng)
- G·ªçi subprocess t·ªõi enhancer_cli.py (d√πng GFPGAN)
- T·ªëi ∆∞u hi·ªáu su·∫•t, log r√µ r√†ng, ki·ªÉm tra l·ªói
"""

import os
import sys
import tempfile
import uuid
import requests
import logging
import subprocess
import time
from pathlib import Path
from minio import Minio
from urllib.parse import quote
from datetime import datetime
import runpod

# ---------------------- C·∫•u h√¨nh MinIO ----------------------
MINIO_ENDPOINT   = os.environ.get("MINIO_ENDPOINT",   "127.0.0.1:9000")
MINIO_ACCESS_KEY = os.environ.get("MINIO_ACCESS_KEY", "minioadmin")
MINIO_SECRET_KEY = os.environ.get("MINIO_SECRET_KEY", "minioadmin")
MINIO_BUCKET     = os.environ.get("MINIO_BUCKET",     "aiclipdfl")
MINIO_SECURE     = bool(os.environ.get("MINIO_SECURE", "0") == "1")

minio_client = Minio(
    MINIO_ENDPOINT,
    access_key=MINIO_ACCESS_KEY,
    secret_key=MINIO_SECRET_KEY,
    secure=MINIO_SECURE
)

# ---------------------- Logging ----------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# ---------------------- Ti·ªán √≠ch ----------------------
def download_file(url: str, local_path: str) -> bool:
    """T·∫£i file t·ª´ URL v·ªÅ local_path."""
    try:
        with requests.get(url, stream=True, timeout=300) as r:
            r.raise_for_status()
            with open(local_path, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
        file_size = os.path.getsize(local_path) / (1024 * 1024)
        logger.info(f"Downloaded: {file_size:.1f} MB")
        return True
    except Exception as e:
        logger.error(f"Download failed: {e}")
        return False

def upload_to_minio(local_path: str, object_name: str) -> str:
    """Upload file l√™n MinIO, tr·∫£ v·ªÅ URL."""
    try:
        minio_client.fput_object(MINIO_BUCKET, object_name, local_path)
        file_url = f"http://{MINIO_ENDPOINT}/{MINIO_BUCKET}/{quote(object_name)}"
        logger.info(f"Uploaded to MinIO: {file_url}")
        return file_url
    except Exception as e:
        logger.error(f"Upload to MinIO failed: {e}")
        raise

# ---------------------- X·ª≠ l√Ω ch√≠nh ----------------------
def handler(job):
    """X·ª≠ l√Ω 1 job RunPod: t·∫£i video, enhance, upload MinIO, tr·∫£ v·ªÅ URL."""
    job_id = job.get("id", "unknown")
    start_time = time.time()
    try:
        job_input = job.get("input", {})
        video_url = job_input.get("video_url")
        enhancer_name = job_input.get("enhancer", "gfpgan")  # default GFPGAN

        if not video_url:
            return {"error": "Missing video_url parameter"}

        logger.info(f"üöÄ Job {job_id}: {enhancer_name.upper()} Face Enhancement")
        logger.info(f"üì∫ Video URL: {video_url}")

        with tempfile.TemporaryDirectory() as temp_dir:
            # ƒê∆∞·ªùng d·∫´n file
            video_path = os.path.join(temp_dir, "input.mp4")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = os.path.join(temp_dir, f"enhanced_{timestamp}.mp4")

            # B∆∞·ªõc 1: T·∫£i video
            logger.info("üì• Step 1/3: Downloading video...")
            if not download_file(video_url, video_path):
                return {"error": "Failed to download input video"}
            if not os.path.exists(video_path) or os.path.getsize(video_path) == 0:
                return {"error": "Downloaded video file is empty or corrupted"}

            # B∆∞·ªõc 2: Enhance video b·∫±ng subprocess t·ªõi enhancer_cli.py
            logger.info(f"‚ú® Step 2/3: Enhancing video with {enhancer_name.upper()} (subprocess)...")
            try:
                result = subprocess.run(
                    [
                        sys.executable, "enhancer_cli.py",
                        "--video_path", video_path,
                        "--enhancer", enhancer_name,
                        "--output_path", output_path
                    ],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    check=True
                )
                logger.info(result.stdout)
                if result.stderr:
                    logger.warning(result.stderr)
            except subprocess.CalledProcessError as e:
                logger.error(f"Enhancement subprocess failed: {e.stderr}")
                return {"error": f"Enhancement subprocess failed: {e.stderr}"}
            except Exception as e:
                logger.error(f"Enhancement failed: {e}")
                return {"error": f"Enhancement failed: {str(e)}"}

            if not os.path.exists(output_path) or os.path.getsize(output_path) == 0:
                return {"error": "Enhancement failed - no output file generated"}

            # B∆∞·ªõc 3: Upload l√™n MinIO
            logger.info("üì§ Step 3/3: Uploading enhanced video to MinIO...")
            output_filename = f"enhanced_{enhancer_name}_{job_id}_{uuid.uuid4().hex[:8]}.mp4"
            try:
                output_url = upload_to_minio(output_path, output_filename)
            except Exception as e:
                return {"error": f"Upload to MinIO failed: {str(e)}"}

            processing_time = time.time() - start_time
            response = {
                "status": "completed",
                "output_video_url": output_url,
                "processing_time_seconds": round(processing_time, 2),
                "enhancer_used": enhancer_name,
                "job_id": job_id,
                "file_size_mb": round(os.path.getsize(output_path) / (1024*1024), 2)
            }
            logger.info(f"‚úÖ Job {job_id} completed successfully in {processing_time:.2f}s")
            return response

    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"‚ùå Job {job_id} failed: {e}")
        return {
            "status": "failed",
            "error": str(e),
            "processing_time_seconds": round(processing_time, 2),
            "job_id": job_id
        }

# ---------------------- Kh·ªüi ƒë·ªông Worker ----------------------
if __name__ == "__main__":
    logger.info("üöÄ Starting GFPGAN Face Enhancement Serverless Worker...")
    logger.info(f"üóÑÔ∏è MinIO Storage: {MINIO_ENDPOINT}/{MINIO_BUCKET}")
    # Ki·ªÉm tra model, m√¥i tr∆∞·ªùng n·∫øu c·∫ßn ·ªü ƒë√¢y
    runpod.serverless.start({"handler": handler})
